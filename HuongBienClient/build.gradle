plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.12'
}

sourceCompatibility = 11
targetCompatibility = 11

group = 'huongbien'
version = '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    // Use the original project's entities for shared classes
    implementation project(':')
    
    // OpenCV (for image processing features)
    implementation files('../libs/opencv-4.5.1-2.jar')
    
    // Gson for JSON handling
    implementation 'com.google.code.gson:gson:2.9.0'
    
    // Logging
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'ch.qos.logback:logback-classic:1.2.6'
    
    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'org.mockito:mockito-core:4.0.0'
}

javafx {
    version = "17.0.2"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.web']
}

application {
    mainClass = 'huongbien.ui.HuongBienClientApp'
}

jar {
    manifest {
        attributes(
            'Main-Class': 'huongbien.ui.HuongBienClientApp'
        )
    }
    
    // Include all dependencies in the jar (except JavaFX which is handled separately)
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
    useJUnitPlatform()
}

// Copy native library to build directory
tasks.register('copyNativeLibs', Copy) {
    from('../libs/native')
    into("$buildDir/libs/native")
}

build.dependsOn(copyNativeLibs)

// Add VM options for native libraries
run {
    doFirst {
        jvmArgs = ["-Djava.library.path=$buildDir/libs/native"]
    }
}